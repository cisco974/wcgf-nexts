// lib/firebase-config.ts
import admin from "firebase-admin";
import { SecretManagerServiceClient } from "@google-cloud/secret-manager";

// Type pour faciliter l'utilisation ailleurs
export type FirestoreTimestamp = admin.firestore.Timestamp;
export type FirestoreData = Record<string, unknown>;

// D√©finir un proxy qui sera rempli apr√®s initialisation asynchrone
const dbProxy = new Proxy({} as admin.firestore.Firestore, {
  get: function (target, prop) {
    // Si db n'est pas initialis√©, lancer une erreur
    if (Object.keys(target).length === 0) {
      console.error(
        "‚ö†Ô∏è Tentative d'acc√®s √† Firebase avant initialisation compl√®te",
      );
      throw new Error(
        "üî• Firebase Firestore non disponible - Firebase n'est pas encore initialis√©",
      );
    }
    return target[prop as keyof admin.firestore.Firestore];
  },
});

// Exportation pour compatibilit√© avec le code existant
export const db = dbProxy;
export const serverTimestamp = admin.firestore.FieldValue.serverTimestamp;

// Fonction pour initialiser Firebase
async function initializeFirebase() {
  console.log("üîÑ D√©but de l'initialisation Firebase...");

  try {
    // Si Firebase est d√©j√† initialis√©, ne rien faire
    if (admin.apps.length > 0) {
      console.log("‚ö†Ô∏è Firebase Admin √©tait d√©j√† initialis√©");
      const firestoreDb = admin.firestore();

      // Copier toutes les propri√©t√©s de Firestore dans le proxy
      Object.setPrototypeOf(dbProxy, Object.getPrototypeOf(firestoreDb));
      Object.assign(dbProxy, firestoreDb);

      return;
    }

    console.log(
      "üîê R√©cup√©ration du secret Firebase depuis Google Secret Manager...",
    );
    const client = new SecretManagerServiceClient();

    const [version] = await client.accessSecretVersion({
      name: "projects/1081763355576/secrets/GOOGLE_APPLICATION_CREDENTIALS/versions/latest",
    });

    const secretPayload = version.payload?.data?.toString();
    if (!secretPayload) {
      throw new Error(
        "‚ùå Impossible de r√©cup√©rer le secret Firebase : Secret vide",
      );
    }

    console.log("üìú Secret brut r√©cup√©r√© avec succ√®s");
    const serviceAccount = JSON.parse(secretPayload);

    if (
      !serviceAccount ||
      !serviceAccount.private_key ||
      !serviceAccount.client_email ||
      !serviceAccount.project_id
    ) {
      throw new Error(
        "‚ùå Cl√© Firebase invalide ou mal form√©e : une propri√©t√© est manquante",
      );
    }

    // Nettoyage de la cl√© priv√©e
    serviceAccount.private_key = serviceAccount.private_key.replace(
      /\\n/g,
      "\n",
    );

    // Initialisation de Firebase Admin
    console.log("üöÄ Initialisation de Firebase Admin...");
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });

    console.log("‚úÖ Firebase Admin initialis√© avec succ√®s");
    const firestoreDb = admin.firestore();

    // Copier toutes les propri√©t√©s de Firestore dans le proxy
    Object.setPrototypeOf(dbProxy, Object.getPrototypeOf(firestoreDb));
    Object.assign(dbProxy, firestoreDb);

    console.log("üî• Firestore initialis√© et proxy configur√©");
  } catch (error) {
    console.error(
      "‚ùå Erreur critique lors de l'initialisation de Firebase:",
      error,
    );

    // Essayer une derni√®re solution de secours avec l'ADC
    try {
      console.log(
        "üîÑ Tentative de secours avec ADC (Application Default Credentials)",
      );
      admin.initializeApp();

      const firestoreDb = admin.firestore();

      // Copier toutes les propri√©t√©s de Firestore dans le proxy
      Object.setPrototypeOf(dbProxy, Object.getPrototypeOf(firestoreDb));
      Object.assign(dbProxy, firestoreDb);

      console.log(
        "‚úÖ Firebase initialis√© avec les identifiants par d√©faut de l'application",
      );
    } catch (fallbackError) {
      console.error(
        "‚ùå √âchec total de l'initialisation Firebase:",
        fallbackError,
      );
      throw new Error("üî• Firebase Firestore non disponible");
    }
  }
}

// Fonction utilitaire pour formater les donn√©es Firestore
export function formatFirestoreData<T>(data: unknown): T {
  if (data === null || data === undefined) {
    return {} as T; // Retourner un objet vide plut√¥t que null/undefined
  }

  if (Array.isArray(data)) {
    return data.map((item) =>
      formatFirestoreData<unknown>(item),
    ) as unknown as T;
  }

  if (typeof data === "object") {
    if (data instanceof admin.firestore.Timestamp) {
      return data.toDate() as unknown as T;
    }

    const result: Record<string, unknown> = {};
    for (const key in data as Record<string, unknown>) {
      result[key] = formatFirestoreData((data as Record<string, unknown>)[key]);
    }
    return result as unknown as T;
  }

  return data as T;
}

// Initialiser Firebase imm√©diatement (mais de mani√®re asynchrone)
// Seulement c√¥t√© serveur
if (typeof window === "undefined") {
  console.log(
    "üìã Ex√©cution c√¥t√© serveur d√©tect√©e, initialisation de Firebase...",
  );
  initializeFirebase().catch((error) => {
    console.error(
      "üî• Erreur lors de l'initialisation automatique de Firebase:",
      error,
    );
  });
} else {
  console.log(
    "üåê Ex√©cution c√¥t√© client d√©tect√©e, Firebase n'est pas initialis√©",
  );
}
